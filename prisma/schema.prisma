generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id              String   @id @default(cuid())
    clerkId         String   @unique
    email           String   @unique
    displayName     String?
    profileImageUrl String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    gamesAdministered Game[]
    gamesJoined       UserGame[]

    @@map("users")
}

model Game {
    id         String @id @default(cuid())
    title      String
    gameStatus GameStatus @default(open)

    admin   User   @relation(fields: [adminId], references: [id])
    adminId String

    players UserGame[]

    @@map("games")
}

enum GameStatus {
    open
    inProgress
    completed
}

model UserGame {
    user   User   @relation(fields: [userId], references: [id])
    userId String

    game   Game   @relation(fields: [gameId], references: [id])
    gameId String

    picks Pick[]

    isKnockedOut Boolean  @default(false)
    joinedAt     DateTime @default(now())

    @@id([userId, gameId])

    @@map("userGames")
}

model Pick {
    id String @id @default(cuid())

    userGame UserGame @relation(fields: [userId, gameId], references: [userId, gameId])
    userId   String
    gameId   String

    gameweek   Gameweek @relation(fields: [gameweekId], references: [id])
    gameweekId String

    teamPicked   Team   @relation(fields: [teamPickedId], references: [id])
    teamPickedId String

    isCorrect Boolean?

    createdAt DateTime @default(now())

    @@map("picks")
}

model Gameweek {
    id             String    @id @default(cuid())
    gameweekNumber Int       @unique
    deadline       DateTime
    fixtures       Fixture[]
    picks          Pick[]

    @@map("gameweeks")
}

model Competition {
    id     String  @id @default(cuid())
    apiId  Int     @unique
    name   String
    code   String
    type   String
    emblem String?

    teams Team[]

    fixtures Fixture[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("competitions")
}

model Team {
    id        String  @id @default(cuid())
    apiId     Int     @unique
    name      String
    shortName String?
    tla       String?
    crest     String?

    competitions Competition[]

    homeFixtures Fixture[] @relation("HomeFixtures")
    awayFixtures Fixture[] @relation("AwayFixtures")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    picks Pick[]

    @@map("teams")
}

model Fixture {
    id       String   @id @default(cuid())
    apiId    Int      @unique
    utcDate  DateTime
    status   String
    matchday Int

    Competition   Competition? @relation(fields: [competitionId], references: [id])
    competitionId String?

    gameweek   Gameweek? @relation(fields: [gameweekId], references: [id])
    gameweekId String?

    homeTeam   Team   @relation("HomeFixtures", fields: [homeTeamId], references: [id])
    homeTeamId String

    awayTeam   Team   @relation("AwayFixtures", fields: [awayTeamId], references: [id])
    awayTeamId String

    score Json

    apiLastUpdated DateTime
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@map("fixtures")
}
